# -*- coding: utf-8 -*-
"""VLM_exp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q4Oe-ydu3zqeQttHrsnVT1cVIk7eNnGH
"""



# ! pip install poppler-utils
!apt-get install poppler-utils
! pip install pdf2image
! pip install docling_core
! pip install docling_document
! pip install flash-attn --no-build-isolation

# ! pip install poppler-utils
!apt-get install poppler-utils
! pip install pdf2image

import numpy as np
import torch
import torchvision.transforms as T
from PIL import Image
from torchvision.transforms.functional import InterpolationMode
from transformers import AutoModel, AutoTokenizer, BitsAndBytesConfig
import os
from pdf2image import convert_from_path
import json
from tqdm import tqdm

IMAGENET_MEAN = (0.485, 0.456, 0.406)
IMAGENET_STD = (0.229, 0.224, 0.225)

def build_transform(input_size):
    MEAN, STD = IMAGENET_MEAN, IMAGENET_STD
    transform = T.Compose([
        T.Lambda(lambda img: img.convert('RGB') if img.mode != 'RGB' else img),
        T.Resize((input_size, input_size), interpolation=InterpolationMode.BICUBIC),
        T.ToTensor(),
        T.Normalize(mean=MEAN, std=STD)
    ])
    return transform

def find_closest_aspect_ratio(aspect_ratio, target_ratios, width, height, image_size):
    best_ratio_diff = float('inf')
    best_ratio = (1, 1)
    area = width * height
    for ratio in target_ratios:
        target_aspect_ratio = ratio[0] / ratio[1]
        ratio_diff = abs(aspect_ratio - target_aspect_ratio)
        if ratio_diff < best_ratio_diff:
            best_ratio_diff = ratio_diff
            best_ratio = ratio
        elif ratio_diff == best_ratio_diff:
            if area > 0.5 * image_size * image_size * ratio[0] * ratio[1]:
                best_ratio = ratio
    return best_ratio

def dynamic_preprocess(image, min_num=1, max_num=12, image_size=448, use_thumbnail=False):
    orig_width, orig_height = image.size
    aspect_ratio = orig_width / orig_height
    target_ratios = set(
        (i, j) for n in range(min_num, max_num + 1) for i in range(1, n + 1) for j in range(1, n + 1)
        if i * j <= max_num and i * j >= min_num)
    target_ratios = sorted(target_ratios, key=lambda x: x[0] * x[1])
    target_aspect_ratio = find_closest_aspect_ratio(
        aspect_ratio, target_ratios, orig_width, orig_height, image_size)
    target_width = image_size * target_aspect_ratio[0]
    target_height = image_size * target_aspect_ratio[1]
    blocks = target_aspect_ratio[0] * target_aspect_ratio[1]
    resized_img = image.resize((target_width, target_height))
    processed_images = []
    for i in range(blocks):
        box = (
            (i % (target_width // image_size)) * image_size,
            (i // (target_width // image_size)) * image_size,
            ((i % (target_width // image_size)) + 1) * image_size,
            ((i // (target_width // image_size)) + 1) * image_size
        )
        split_img = resized_img.crop(box)
        processed_images.append(split_img)
    assert len(processed_images) == blocks
    if use_thumbnail and len(processed_images) != 1:
        thumbnail_img = image.resize((image_size, image_size))
        processed_images.append(thumbnail_img)
    return processed_images

def load_image(image_file, input_size=448, max_num=12, dtype=torch.float32, device='cpu'):
    image = Image.open(image_file).convert('RGB')
    transform = build_transform(input_size=input_size)
    images = dynamic_preprocess(image, image_size=input_size, use_thumbnail=True, max_num=max_num)
    pixel_values = [transform(image) for image in images]
    pixel_values = torch.stack(pixel_values).to(dtype=dtype, device=device)
    return pixel_values

def load_model(model_path, use_gpu=True, device_map="auto", load_in_8bit=False, load_in_4bit=False):
    """Load the InternVL model and tokenizer with memory optimization options."""
    print(f"Loading model from {model_path}")

    # Create BitsAndBytesConfig if 4-bit or 8-bit quantization is requested
    quantization_config = None
    if load_in_4bit:
        print("Loading model in 4-bit quantization mode")
        quantization_config = BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_compute_dtype=torch.float16,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_use_double_quant=True
        )
    elif load_in_8bit:
        print("Loading model in 8-bit quantization mode")
        quantization_config = BitsAndBytesConfig(
            load_in_8bit=True
        )

    # Memory optimization settings
    kwargs = {
        "low_cpu_mem_usage": True,
        "trust_remote_code": True,
    }

    # Set dtype based on device
    dtype = torch.bfloat16 if use_gpu and torch.cuda.is_available() else torch.float32
    kwargs["torch_dtype"] = dtype

    # Add device_map if specified
    if device_map is not None:
        kwargs["device_map"] = device_map

    # Add quantization config if specified
    if quantization_config is not None:
        kwargs["quantization_config"] = quantization_config

    try:
        # Load model
        model = AutoModel.from_pretrained(model_path, **kwargs)

        # If not using device_map, explicitly move to appropriate device
        if device_map is None:
            if use_gpu and torch.cuda.is_available():
                print("Moving model to CUDA")
                model = model.cuda()
            else:
                print("Using CPU for inference (warning: this will be very slow)")
                model = model.cpu()

        model = model.eval()  # Set to evaluation mode

    except RuntimeError as e:
        if "CUDA out of memory" in str(e):
            print("GPU out of memory error detected. Trying with more aggressive memory optimization...")
            if load_in_8bit:
                print("Falling back to 4-bit quantization")
                return load_model(model_path, use_gpu, device_map, False, True)
            elif not load_in_8bit and not load_in_4bit:
                print("Falling back to 8-bit quantization")
                return load_model(model_path, use_gpu, device_map, True, False)
            else:
                print("Falling back to CPU")
                return load_model(model_path, False, "cpu", False, False)
        else:
            raise e

    tokenizer = AutoTokenizer.from_pretrained(model_path, trust_remote_code=True, use_fast=False)
    return model, tokenizer, dtype

def convert_pdf_to_images(pdf_path, output_dir, dpi=300):
    """Convert PDF pages to images."""
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    print(f"Converting PDF {pdf_path} to images...")
    images = convert_from_path(pdf_path, dpi=dpi)

    image_paths = []
    for i, image in enumerate(images):
        image_path = os.path.join(output_dir, f'page_{i+1}.jpg')
        image.save(image_path, 'JPEG')
        image_paths.append(image_path)

    print(f"Converted {len(image_paths)} pages to images")
    return image_paths

def process_pdf_with_vlm(model, tokenizer, pdf_path, output_dir, save_dir, max_num=12, use_gpu=True, batch_size=1, dtype=torch.float32):
    """Process a PDF file with the VLM model."""
    # Create image directory
    image_dir = os.path.join(output_dir, 'images')
    if not os.path.exists(image_dir):
        os.makedirs(image_dir)

    # Convert PDF to images
    image_paths = convert_pdf_to_images(pdf_path, image_dir)

    # Determine device
    device = torch.device("cuda" if use_gpu and torch.cuda.is_available() else "cpu")
    print(f"Model is on device: {next(model.parameters()).device}, dtype: {dtype}")

    # Process each page with the VLM
    results = []
    for i, image_path in enumerate(tqdm(image_paths, desc="Processing pages")):
        page_num = i + 1
        print(f"Processing page {page_num}/{len(image_paths)}")

        try:
            # Load and prepare the image
            pixel_values = load_image(image_path, max_num=max_num, dtype=dtype, device=device)
            print(f"Pixel values dtype: {pixel_values.dtype}, device: {pixel_values.device}")

            # Clear CUDA cache between pages to prevent memory buildup
            if torch.cuda.is_available():
                torch.cuda.empty_cache()

            # Generate prompts for different aspects of the document
            prompts = [
                "<image>\nExtract the hierarchical structure of this document page, identifying all headings, subheadings, and their content. Format the output as structured text maintaining the hierarchy.",
                "<image>\nIdentify and extract any tables, lists, or structured elements in this document page.",
                "<image>\nExtract any figures, charts, or visual elements on this page and describe their content."
            ]

            page_results = {}
            for j, prompt in enumerate(prompts):
                print(f"Running prompt {j+1}/{len(prompts)}")
                generation_config = dict(max_new_tokens=1024, do_sample=False)

                # Process with smaller chunks if memory issues occur
                try:
                    response = model.chat(tokenizer, pixel_values, prompt, generation_config)
                except RuntimeError as e:
                    if "CUDA out of memory" in str(e):
                        print("CUDA out of memory when processing prompt. Falling back to CPU...")
                        if torch.cuda.is_available():
                            torch.cuda.empty_cache()
                        model_cpu = model.cpu()
                        pixel_values_cpu = pixel_values.cpu().to(torch.float32)  # Use float32 on CPU

                        # Process in smaller batches if needed
                        if pixel_values_cpu.size(0) > 1:
                            print(f"Processing in smaller batches (original batch size: {pixel_values_cpu.size(0)})")
                            responses = []
                            for k in range(0, pixel_values_cpu.size(0), batch_size):
                                batch = pixel_values_cpu[k:k+batch_size]
                                batch_response = model_cpu.chat(tokenizer, batch, prompt, generation_config)
                                responses.append(batch_response)
                            response = " ".join(responses)
                        else:
                            response = model_cpu.chat(tokenizer, pixel_values_cpu, prompt, generation_config)

                        # Move model back to GPU if it was there before
                        if use_gpu and torch.cuda.is_available():
                            model.cuda()
                    else:
                        raise e

                if j == 0:
                    page_results["structure"] = response
                elif j == 1:
                    page_results["tables_lists"] = response
                elif j == 2:
                    page_results["figures"] = response

            page_results["page_number"] = page_num
            results.append(page_results)

            # Clear memory after each page
            if torch.cuda.is_available():
                torch.cuda.empty_cache()

        except Exception as e:
            print(f"Error processing page {page_num}: {str(e)}")
            page_results = {
                "page_number": page_num,
                "error": str(e),
                "structure": "Error during processing",
                "tables_lists": "Error during processing",
                "figures": "Error during processing"
            }
            results.append(page_results)

    # Save results
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    # Save as JSON
    json_path = os.path.join(save_dir, "pdf_parsed_results.json")
    with open(json_path, 'w') as f:
        json.dump(results, f, indent=2)

    # Save as text
    text_path = os.path.join(save_dir, "pdf_parsed_results.txt")
    with open(text_path, 'w') as f:
        for page in results:
            f.write(f"PAGE {page['page_number']}\n")
            f.write("="*80 + "\n\n")
            f.write("DOCUMENT STRUCTURE:\n")
            f.write(page.get('structure', 'Not available') + "\n\n")
            f.write("TABLES AND LISTS:\n")
            f.write(page.get('tables_lists', 'Not available') + "\n\n")
            f.write("FIGURES AND VISUALS:\n")
            f.write(page.get('figures', 'Not available') + "\n\n")
            f.write("-"*80 + "\n\n")

    print(f"Results saved to {save_dir}")
    return results

def save_model_local(model, tokenizer, save_dir):
    """Save the fine-tuned model to a local directory."""
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    print(f"Saving model to {save_dir}")
    model.save_pretrained(save_dir)
    tokenizer.save_pretrained(save_dir)
    print(f"Model saved to {save_dir}")

def main():
    # Hardcoded parameters
    pdf_path = "/content/SHIMI.pdf"  # Adjusted for Databricks DBFS
    model_path = "OpenGVLab/InternVL2-8B"
    output_dir = "/content/output"
    save_dir = "/content/results"
    model_save_dir = "/content/saved_model"
    max_num = 6  # Reduced from 12 to lower memory requirements

    # Memory optimization settings
    use_gpu = True  # Set to False to force CPU usage
    load_in_8bit = False  # Set to True to use 8-bit quantization
    load_in_4bit = False  # Set to True to use 4-bit quantization
    device_map = "auto"  # Helps with model distribution across multiple GPUs or CPU
    batch_size = 1  # For batch processing when falling back to smaller chunks

    # Determine available VRAM to guide loading strategy
    if use_gpu and torch.cuda.is_available():
        free_mem = torch.cuda.get_device_properties(0).total_memory / (1024**3)  # GB
        print(f"Total GPU memory: {free_mem:.2f} GB")

        # Adjust settings based on available memory
        if free_mem < 10:  # Less than 10GB
            print("Low GPU memory detected, using 4-bit quantization")
            load_in_4bit = True
            max_num = 2  # Further reduce max tiles
        elif free_mem < 16:  # Less than 16GB
            print("Medium GPU memory detected, using 8-bit quantization")
            load_in_8bit = True
            max_num = 4  # Reduce max tiles

    # Load model with memory optimization
    try:
        model, tokenizer, dtype = load_model(
            model_path,
            use_gpu=use_gpu,
            device_map=device_map,
            load_in_8bit=load_in_8bit,
            load_in_4bit=load_in_4bit
        )

        # Process PDF with memory management
        process_pdf_with_vlm(
            model=model,
            tokenizer=tokenizer,
            pdf_path=pdf_path,
            output_dir=output_dir,
            save_dir=save_dir,
            max_num=max_num,
            use_gpu=use_gpu,
            batch_size=batch_size,
            dtype=dtype
        )

        # Save model
        try:
            save_model_local(model, tokenizer, model_save_dir)
        except Exception as e:
            print(f"Warning: Could not save model locally due to: {e}")
            print("Skipping model saving step.")

    except Exception as e:
        print(f"Error: {e}")
        print("Try reducing max_num further or setting use_gpu=False to use CPU mode.")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()









# ! pip install poppler-utils
!apt-get install poppler-utils
! pip install pdf2image
! pip install docling_core
# ! pip install docling_document
! pip install flash-attn --no-build-isolation

import os
import json
import torch
from pdf2image import convert_from_path
from docling_core.types.doc import DoclingDocument
from docling_core.types.doc.document import DocTagsDocument
from transformers import AutoProcessor, AutoModelForVision2Seq
from pathlib import Path

class PDFParser:
    def __init__(self, model_name="ds4sd/SmolDocling-256M-preview", device=None):
        """
        Initialize the PDF parser with SmolDocling model

        Args:
            model_name (str): Name of the model to use
            device (str): Device to use for inference (cuda or cpu)
        """
        if device is None:
            self.device = "cuda" if torch.cuda.is_available() else "cpu"
        else:
            self.device = device

        print(f"Using device: {self.device}")

        # Initialize processor and model
        self.processor = AutoProcessor.from_pretrained(model_name)

        # First initialize model without flash attention
        self.model = AutoModelForVision2Seq.from_pretrained(
            model_name,
            torch_dtype=torch.bfloat16,
        )

        # Then move model to device
        self.model = self.model.to(self.device)

        # Finally set attention implementation if using CUDA
        if self.device == "cuda":
            try:
                # Try to set flash attention after moving to GPU
                self.model.config.attn_implementation = "flash_attention_2"
                print("Successfully enabled Flash Attention 2.0")
            except Exception as e:
                print(f"Warning: Could not enable Flash Attention 2.0: {e}")
                print("Falling back to standard attention implementation")

    def convert_pdf_to_images(self, pdf_path, dpi=300):
        """
        Convert PDF to list of PIL images

        Args:
            pdf_path (str): Path to the PDF file
            dpi (int): DPI for the output images

        Returns:
            list: List of PIL images
        """
        print(f"Converting PDF to images: {pdf_path}")
        return convert_from_path(pdf_path, dpi=dpi)

    def process_image(self, image):
        """
        Process a single image with SmolDocling

        Args:
            image (PIL.Image): Image to process

        Returns:
            tuple: (doctags, docling_document)
        """
        # Create input messages
        messages = [
            {
                "role": "user",
                "content": [
                    {"type": "image"},
                    {"type": "text", "text": "Convert this page to docling."}
                ]
            },
        ]

        # Prepare inputs
        prompt = self.processor.apply_chat_template(messages, add_generation_prompt=True)
        inputs = self.processor(
            text=prompt,
            images=[image],
            return_tensors="pt",
            truncation=True
        )
        inputs = inputs.to(self.device)

        # Generate outputs
        generated_ids = self.model.generate(**inputs, max_new_tokens=8192)
        prompt_length = inputs.input_ids.shape[1]
        trimmed_generated_ids = generated_ids[:, prompt_length:]
        doctags = self.processor.batch_decode(
            trimmed_generated_ids,
            skip_special_tokens=False,
        )[0].lstrip()

        # Create doctags document
        doctags_doc = DocTagsDocument.from_doctags_and_image_pairs([doctags], [image])

        # Create docling document
        doc = DoclingDocument(name="Page")
        doc.load_from_doctags(doctags_doc)

        return doctags, doc

    def process_pdf(self, pdf_path, output_dir=None):
        """
        Process a PDF file and save results

        Args:
            pdf_path (str): Path to the PDF file
            output_dir (str): Directory to save output files

        Returns:
            dict: Combined JSON result for all pages
        """
        # Verify PDF path exists
        if not os.path.exists(pdf_path):
            raise FileNotFoundError(f"PDF file not found: {pdf_path}")

        # Create output directory if it doesn't exist
        if output_dir is None:
            pdf_name = os.path.basename(pdf_path).replace('.pdf', '')
            output_dir = f"output_{pdf_name}"

        Path(output_dir).mkdir(parents=True, exist_ok=True)

        try:
            # Convert PDF to images
            images = self.convert_pdf_to_images(pdf_path)
            if not images:
                raise ValueError(f"Failed to extract images from PDF: {pdf_path}")
        except Exception as e:
            print(f"Error converting PDF to images: {e}")
            raise

        # Process each page
        combined_result = {
            "document_name": os.path.basename(pdf_path),
            "pages": []
        }

        # Create a metadata file with processing information
        with open(os.path.join(output_dir, "metadata.json"), "w", encoding="utf-8") as f:
            metadata = {
                "source_pdf": pdf_path,
                "total_pages": len(images),
                "model_used": self.model.__class__.__name__,
                "device": self.device,
                "processing_date": str(Path(output_dir).stat().st_mtime)
            }
            json.dump(metadata, f, indent=2, ensure_ascii=False)

        # Keep track of successful and failed pages
        successful_pages = 0
        failed_pages = []

        for i, image in enumerate(images):
            page_num = i + 1
            print(f"Processing page {page_num}/{len(images)}")

            try:
                doctags, doc = self.process_image(image)

                # Save doctags
                with open(os.path.join(output_dir, f"page_{page_num}_doctags.txt"), "w", encoding="utf-8") as f:
                    f.write(doctags)

                successful_pages += 1
            except Exception as e:
                error_message = f"Error processing page {page_num}: {str(e)}"
                print(error_message)
                failed_pages.append({"page": page_num, "error": error_message})

                # Save error information
                with open(os.path.join(output_dir, f"page_{page_num}_error.txt"), "w", encoding="utf-8") as f:
                    f.write(f"Error processing page {page_num}: {str(e)}")

                # Create a placeholder for this page
                doctags = "<doc></doc>"
                doc = DoclingDocument(name=f"Page {page_num} (Error)")

                # Continue with the next page
                continue

            # Save markdown
            markdown = doc.export_to_markdown()
            with open(os.path.join(output_dir, f"page_{page_num}.md"), "w", encoding="utf-8") as f:
                f.write(markdown)

            # Get JSON representation by converting from markdown
            # First export to markdown
            markdown = doc.export_to_markdown()

            # Create a simplified JSON structure from the markdown content
            # This is a basic representation - you might need to customize based on your needs
            blocks = []
            lines = markdown.split('\n')
            current_block = {"type": "paragraph", "content": ""}

            for line in lines:
                # Skip empty lines
                if not line.strip():
                    if current_block["content"]:
                        blocks.append(current_block)
                        current_block = {"type": "paragraph", "content": ""}
                    continue

                # Check for headings
                if line.startswith('#'):
                    if current_block["content"]:
                        blocks.append(current_block)

                    # Count heading level
                    level = 0
                    for char in line:
                        if char == '#':
                            level += 1
                        else:
                            break

                    current_block = {
                        "type": f"heading{level}",
                        "content": line[level:].strip()
                    }
                    blocks.append(current_block)
                    current_block = {"type": "paragraph", "content": ""}
                # Handle lists
                elif line.strip().startswith(('- ', '* ', '1. ')):
                    if current_block["type"] != "list":
                        if current_block["content"]:
                            blocks.append(current_block)
                        current_block = {"type": "list", "content": line.strip() + "\n"}
                    else:
                        current_block["content"] += line.strip() + "\n"
                # Regular paragraph content
                else:
                    if current_block["type"] != "paragraph":
                        if current_block["content"]:
                            blocks.append(current_block)
                        current_block = {"type": "paragraph", "content": line.strip()}
                    else:
                        if current_block["content"]:
                            current_block["content"] += " " + line.strip()
                        else:
                            current_block["content"] = line.strip()

            # Add the last block if it has content
            if current_block["content"]:
                blocks.append(current_block)

            # Create the final JSON structure
            json_data = {
                "blocks": blocks,
                "raw_markdown": markdown
            }

            with open(os.path.join(output_dir, f"page_{page_num}.json"), "w", encoding="utf-8") as f:
                json.dump(json_data, f, indent=2, ensure_ascii=False)

            # Add to combined result
            combined_result["pages"].append({
                "page_number": page_num,
                "content": json_data
            })

        # Update metadata with processing results
        metadata_path = os.path.join(output_dir, "metadata.json")
        if os.path.exists(metadata_path):
            with open(metadata_path, "r", encoding="utf-8") as f:
                metadata = json.load(f)
        else:
            metadata = {}

        # Add processing statistics
        metadata.update({
            "successful_pages": successful_pages,
            "failed_pages": len(failed_pages),
            "failed_pages_details": failed_pages,
            "completion_time": str(Path(output_dir).stat().st_mtime)
        })

        # Save updated metadata
        with open(metadata_path, "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)

        # Save combined JSON
        combined_json_path = os.path.join(output_dir, "combined_result.json")
        with open(combined_json_path, "w", encoding="utf-8") as f:
            json.dump(combined_result, f, indent=2, ensure_ascii=False)

        # Print summary
        print(f"\nProcessing complete. Results saved to {output_dir}")
        print(f"Combined JSON saved to {combined_json_path}")
        print(f"Successfully processed {successful_pages} out of {len(images)} pages")
        if failed_pages:
            print(f"Failed to process {len(failed_pages)} pages. See metadata.json for details.")

        return combined_result

def process_pdf_file(pdf_path, output_dir=None, model_name="ds4sd/SmolDocling-256M-preview"):
    """
    Utility function to process a PDF file

    Args:
        pdf_path (str): Path to the PDF file
        output_dir (str): Directory to save output files
        model_name (str): Name of the model to use

    Returns:
        dict: Combined JSON result for all pages
    """
    parser = PDFParser(model_name=model_name)
    return parser.process_pdf(pdf_path, output_dir)

# # Example usage
# if __name__ == "__main__":
#     import argparse

#     parser = argparse.ArgumentParser(description="Parse PDF using SmolDocling")
#     parser.add_argument("pdf_path", help="Path to the PDF file")
#     parser.add_argument("--output-dir", help="Directory to save output files")
#     parser.add_argument("--model", default="ds4sd/SmolDocling-256M-preview", help="Model name")

#     args = parser.parse_args()

#     process_pdf_file(args.pdf_path, args.output_dir, args.model)

# Prerequisites:
# pip install torch
# pip install docling_core
# pip install transformers
# pip install pdf2image
# pip install poppler-utils (for Linux/WSL) or brew install poppler (for macOS)

import os
import json

# Method 1: Simple function call (recommended for most cases)
def process_single_pdf():
    # Process a single PDF file
    result = process_pdf_file(
        pdf_path="/content/SHIMI.pdf",
        output_dir="/content/output"  # Optional, will create a default folder if not specified
    )

    # Print structure of the first page to verify
    if result["pages"]:
        print("\nFirst page structure:")
        print(json.dumps(result["pages"][0], indent=2))

    return result

# Method 2: Using the PDFParser class directly (for more control)
def process_with_custom_options():
    # Initialize the parser
    parser = PDFParser(model_name="ds4sd/SmolDocling-256M-preview")

    # Process multiple PDFs
    results = []
    pdf_directory = "/content"
    output_base_dir = "/content/output"

    for filename in os.listdir(pdf_directory):
        if filename.lower().endswith('.pdf'):
            pdf_path = os.path.join(pdf_directory, filename)
            output_dir = os.path.join(output_base_dir, os.path.splitext(filename)[0])

            print(f"\nProcessing {filename}...")
            try:
                result = parser.process_pdf(pdf_path, output_dir)
                results.append({"pdf": filename, "success": True, "result": result})
                print(f"Successfully processed {filename}")
            except Exception as e:
                print(f"Error processing {filename}: {e}")
                results.append({"pdf": filename, "success": False, "error": str(e)})

    return results

# Method 3: Command-line usage
# Run from terminal:
# python -m pdf_parser /path/to/your/document.pdf --output-dir /path/to/output --model ds4sd/SmolDocling-256M-preview

# Choose one of the methods above or run directly as a script
if __name__ == "__main__":
    # Uncomment the method you want to use
    # process_single_pdf()
    process_with_custom_options()

    # Or use command-line arguments if run as a script
    # import argparse

    # parser = argparse.ArgumentParser(description="Parse PDF using SmolDocling")
    # parser.add_argument("pdf_path", help="Path to the PDF file")
    # parser.add_argument("--output-dir", help="Directory to save output files")
    # parser.add_argument("--model", default="ds4sd/SmolDocling-256M-preview", help="Model name")

    # args = parser.parse_args()

    # process_pdf_file(args.pdf_path, args.output_dir, args.model)

